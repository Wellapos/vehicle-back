#!/bin/bash

echo "üêò Configurando PostgreSQL para a API de Ve√≠culos..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se PostgreSQL est√° instalado
if ! command -v psql &> /dev/null; then
    print_error "PostgreSQL n√£o est√° instalado!"
    echo "Instale o PostgreSQL primeiro:"
    echo "Ubuntu/Debian: sudo apt install postgresql postgresql-contrib"
    echo "CentOS/RHEL: sudo dnf install postgresql postgresql-server"
    echo "macOS: brew install postgresql"
    exit 1
fi

print_status "PostgreSQL encontrado"

# Verificar se PostgreSQL est√° rodando
if ! sudo systemctl is-active --quiet postgresql; then
    print_warning "PostgreSQL n√£o est√° rodando. Iniciando..."
    sudo systemctl start postgresql
    sudo systemctl enable postgresql
fi

print_status "PostgreSQL est√° rodando"

# Configura√ß√µes do banco
DB_NAME="vehicle_expense_db"
DB_USER="myuser"
DB_PASSWORD="mypassword"

echo ""
echo "üìã Configura√ß√µes do banco:"
echo "   Nome do banco: $DB_NAME"
echo "   Usu√°rio: $DB_USER"
echo "   Senha: $DB_PASSWORD"
echo ""

# Criar banco e usu√°rio
print_status "Criando banco de dados e usu√°rio..."

sudo -u postgres psql << EOF
-- Criar banco de dados
CREATE DATABASE $DB_NAME;

-- Criar usu√°rio
CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD';

-- Dar permiss√µes
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;

-- Conectar ao banco e dar permiss√µes adicionais
\c $DB_NAME
GRANT ALL ON SCHEMA public TO $DB_USER;
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $DB_USER;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $DB_USER;

-- Sair
\q
EOF

if [ $? -eq 0 ]; then
    print_status "Banco de dados criado com sucesso!"
else
    print_error "Erro ao criar banco de dados"
    exit 1
fi

# Verificar se o arquivo .env existe
if [ ! -f .env ]; then
    print_warning "Arquivo .env n√£o encontrado. Criando..."
    cp env.example .env
fi

# Atualizar DATABASE_URL no .env
print_status "Configurando vari√°veis de ambiente..."

# Backup do arquivo .env
cp .env .env.backup

# Atualizar DATABASE_URL
sed -i "s|DATABASE_URL=.*|DATABASE_URL=\"postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DB_NAME\"|" .env

print_status "Vari√°veis de ambiente configuradas"

# Instalar depend√™ncias se necess√°rio
if [ ! -d "node_modules" ]; then
    print_status "Instalando depend√™ncias..."
    npm install
fi

# Gerar cliente Prisma
print_status "Gerando cliente Prisma..."
npm run db:generate

# Criar tabelas
print_status "Criando tabelas no banco..."
npm run db:push

# Perguntar se quer popular com dados de exemplo
echo ""
read -p "ü§î Deseja popular o banco com dados de exemplo? (y/n): " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    print_status "Populando banco com dados de exemplo..."
    npm run db:seed
fi

echo ""
print_status "Configura√ß√£o conclu√≠da!"
echo ""
echo "üìã Resumo da configura√ß√£o:"
echo "   Banco: $DB_NAME"
echo "   Usu√°rio: $DB_USER"
echo "   Senha: $DB_PASSWORD"
echo "   Host: localhost"
echo "   Porta: 5432"
echo ""
echo "üöÄ Para iniciar a API:"
echo "   npm run dev"
echo ""
echo "üß™ Para testar:"
echo "   npm run test:api"
echo ""
echo "üìä Para acessar o Prisma Studio:"
echo "   npm run db:studio"
